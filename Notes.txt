Backend Setup:
===
$ cd backend
$ npm init -y
$ npm i express cors dotenv mongodb mongoose
$ npm i -D ts-node typescript nodemon @types/express @types/cors @types/node
$ npx tsc --init

Start the backend
$ npm run dev


Frontend Setup:
===
https://ui.shadcn.com/

Follow steps in docs - https://ui.shadcn.com/docs/installation -> Framework Vite
$ npm create vite@latest -> project name frontend -> framework React, TypeScript

$ cd frontend
$ npm install
Start the frontend
$ npm run dev

$ npm install -D tailwindcss postcss autoprefixer
$ npx tailwindcss init -p

$ npm i -D @types/node

$ npx shadcn-ui@latest init -> yes, New York, Slate, src/global.css, yes, blank, blank, blank, blank, no, Y
Configs saved in components.json

https://ui.shadcn.com/docs/components/
$ npx shadcn-ui@latest add button
Created in components/ui folder


Database Setup:
===
Create Database in https://cloud.mongodb.com/


React Router Setup:
===
$ npm i react-router-dom


rfcp, rfc
py-10 class for padding top and bottom


https://ui.shadcn.com/docs/components/sheet
$ npx shadcn-ui@latest add sheet
$ npm i lucide-react (for icons)
$ npx shadcn-ui@latest add separator

md:hidden is a Tailwind class name used to display for mobile screens
md:block for desktop screens

hover:text-orange-500 is a Tailwind class name used to apply a property to a html tag.

max-h-[600px] to set css property of Max Height to 600px.

-mt-16 to set margin top to -16px.

flex-col md:flex-row - It will be applying flex-col for mobile, flex-row for desktop view.


Auth0 Setup:
===
https://youtu.be/yufqeJLP1rI - Auth0 in 100 Seconds // And beyond with a Next.js Authentication Tutorial
https://auth0.com/ -> Applications -> mern-food-ordering-app-frontend, Sing Page Web Applications -> Settings -> Paste http://localhost:5173 in Allowed Callback/Logout/Web Origins -> Save

$ npm i @auth0/auth0-react


Authenticated user links:
$ npx shadcn-ui@latest add dropdown-menu


Test user creation API using Postman of VS Code extension Thunder Client.

$ npm i react-query

Auth0 Access Token is used verify the request to backend is done by logged in user only.


Validate Access Token at backend:
https://auth0.com/ -> Applications -> APIs -> Name, Identifier as mern-food-ordering-app-api -> Node.Js
middleware folder -> handle authentication or work on the request, we separate it from bussiness logic
$ npm i express-oauth2-jwt-bearer

Json Web Toekn gives tools to parse and decode the access token.
$ npm i jsonwebtoken
$ npm i -D @types/jsonwebtoken


User profile form at frontend:
https://ui.shadcn.com/docs/components/form
shadcn form components uses React Hook Form behind the scenes which is one of the top packages used by companies.
And Zod framework which lets us do advanced validations.
$ npx shadcn-ui@latest add form
$ npx shadcn-ui@latest add input
$ npm i zod

https://ui.shadcn.com/docs/components/button -> Loading

Toast notifications:
$ npx shadcn-ui@latest add sonner

Protected Route is to allow only logged in users to that page.


Backend deployment:
npx tsc - converts TypeScript to JavaScript

render.com -> New -> Web Service

$ npm run build
$ npm start


Add following rule in Rdirects/Rewrites option in frontend render app.
/* -> /index.html, Rewrite

Update call back urls in auth0 also.


Cloudinary Setup:
To upload restruant images to Cloud and save the populated url to DB and disaply using that link later on.
This optimizes the image also.
https://cloudinary.com/
Getting Started - https://console.cloudinary.com/pm/c-60b42ff0687710fda805aa60568a05/getting-started
https://youtu.be/2Z1oKtxleb4 - Getting Started in Node.js with Cloudinary - Dev Hints

$ npm i cloudinary multer @types/multer
multer helps in manging the image binary which is not easy to handle in forms.

Demo index.js
===
import { v2 as cloudinary } from 'cloudinary';

(async function() {

    // Configuration
    cloudinary.config({ 
        cloud_name: 'dh6uddvhu', 
        api_key: '491284126668597', 
        api_secret: '<your_api_secret>' // Click 'View API Keys' above to copy your API secret
    });
    
    // Upload an image
     const uploadResult = await cloudinary.uploader
       .upload(
           'https://res.cloudinary.com/demo/image/upload/getting-started/shoes.jpg', {
               public_id: 'shoes',
           }
       )
       .catch((error) => {
           console.log(error);
       });
    
    console.log(uploadResult);
    
    // Optimize delivery by resizing and applying auto-format and auto-quality
    const optimizeUrl = cloudinary.url('shoes', {
        fetch_format: 'auto',
        quality: 'auto'
    });
    
    console.log(optimizeUrl);
    
    // Transform the image: auto-crop to square aspect_ratio
    const autoCropUrl = cloudinary.url('shoes', {
        crop: 'auto',
        gravity: 'auto',
        width: 500,
        height: 500,
    });
    
    console.log(autoCropUrl);    
})();
===


Create restaurant API:
In postname while testing resataurant API.
The body should be of form type, and other than strings can be inputed as like
cuisines[0], menuItems[0][name], menuItems[0][price], imageFile (type file).

Restaurant form Cuisine Section:
$ npx shadcn-ui@latest add checkbox

useFormContext - used to pass the form field to child.
useFieldArray - used to provide context for accessing fields array with append, remove function.

For the prices if taking in dollars, convert it to lowest dinominator like cents while saving in DB.
As it is easy while integrating with stripe payment gateway.

AspectRatio is a shadcn component that displays image in a specific aspect ratio irrespective of image.
$ npx shadcn@latest add aspect-ratio

Change protected route logic to fix async loading issue during page load.

.lean() - remove mongoose ids, metadata, etc.
http://localhost:7001/api/restaurant/search/london - as this not protected route we can just hit to test search API.

lg:grid-cols-[2fr_3fr] - used to have specific CSS for large screens.
group - add hover effect to child component, if user hovers on parent component.

Mongoose Compass - GUI tool that allows to add content to DB via json.
- https://www.mongodb.com/products/tools/compass
Add restaurant test data to DB.

$ npx shadcn@latest add pagination

$ npx tsc - run this before deploy the code to git/render to see frontend typescript errors.

$ npx shadcn@latest add card

$ npx shadcn@latest add badge

useLocation() from react-router-dom gives the path of the URI.

$ npx shadcn@latest add dialog

stripe.com -> Log In -> H@@ -> Authenticator code -> Developers -> API keys
$ npm install stripe - in backend

stripe.com -> Developers -> Events -> A Checkout Session was completed - show the event of stripe and can see order details, state of payment, etc.
https://dashboard.stripe.com/test/workbench/events
metadata of orderId, restaurantId is sent to stripe so we save.

Stripe Test Cards - https://docs.stripe.com/testing#international-cards -> India -> 4000003560000008

* For INR the lowest denomination is piasa, so need to store prices in DB with paisa only.

In normal circumstances when we want to use webhook from payment gateway, the code need to be deployed.
Because webhooks can't connect to localhost.
But stripe has a way to accept webhooks locally using the Stripe CLI.

Stripe CLI Setup:
stripe.com -> Developers -> Webhooks -> Test in local environment/Add local listener
-> Download the CLI -> https://docs.stripe.com/stripe-cli
-> Sample usage for Node.js
$ brew install stripe/stripe-cli/stripe
$ stripe login
$ stripe listen --forward-to localhost:7000/api/order/checkout/webhook
-> use the webhook secret to verify the request

$ stripe trigger checkout.session.completed - to simulate a stripe event

$ npm i concurrently - in backend, to allow to run multiple npm commands under the same script

Update express to pass raw data for backend stripe webhook API.

Deploying checkout flow to render:
stripe.com -> Developers -> Webhooks -> Add an endpoint/Add endpoint -> (backend/render web service URL)/api/order/checkout/webhook, Add event - checkout, checkout.session.completed
Update backend with new environment variables (signining secrete is different from local).
